{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Python_Crash_Course_Students.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "JOb4YdnOik98",
        "N3VPSFezjMNT",
        "B7WpC3Wtjgu0",
        "UQnQWFEyL9fP",
        "pWd2xKZNXQHQ",
        "hbC0UG3rXQHV",
        "oyKm00fAXQHV",
        "2PjRgbKZXQHX",
        "ObA9PRtQL9hT"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Excercise 1\n",
        "Try answering the following questions to gauge your understanding:"
      ],
      "metadata": {
        "id": "VVU7zhwENEZZ"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mTSD90KSCp-g"
      },
      "source": [
        "**1 -** Given the variables:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GYQp_5UuCpmc"
      },
      "source": [
        "planet = \"Earth\"\n",
        "diameter = 12742"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nGWKKpcDChKA"
      },
      "source": [
        "Use `.format()` to print the following string:\n",
        "\n",
        "The diameter of Earth is 12742 kilometers."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aIXG_y2bB3kP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7a807a0d-fae0-49d2-b29c-54036f1a9269"
      },
      "source": [
        "# Write your solution here\n",
        "print('The diameter of {} is {} kilometers'.format(planet,diameter))"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The diameter of Earth is 12742 kilometers\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jeiSxsFVDe69"
      },
      "source": [
        "**2 -** Given this nested dictionary grab the word \"hello\". Be prepared, this will be annoying/tricky"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uWuRX6PgDizF"
      },
      "source": [
        "d = {'k1':[1,2,3,{'tricky':['oh','man','inception',{'target':[1,2,3,'hello']}]}]}"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C-t4fis0DjfB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1982f1fb-26eb-43bb-d2d5-9a5c6b6db324"
      },
      "source": [
        "# Write your solution here\n",
        "var=d['k1']\n",
        "newdict=var[3]\n",
        "newlist=newdict['tricky']\n",
        "findict=newlist[3]\n",
        "word=findict['target']\n",
        "print(word[3])"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sRrYqg8FEHwf"
      },
      "source": [
        "**3 -** Use lambda expressions and the filter() function to filter out words from a list that don't start with the letter 's'. For example:\n",
        "\n",
        "`seq = ['soup','dog','salad','cat','great']`\n",
        "\n",
        "should be filtered down to:\n",
        "\n",
        "`['soup','salad']`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oaQFt7pDEMnz"
      },
      "source": [
        "seq = ['soup','dog','salad','cat','great']"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BLiEyI-1ENg0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95115680-56b6-402d-ed7b-794b71c89820"
      },
      "source": [
        "# Write your solution here\n",
        "filtered=filter(lambda seq: seq[:][0] ==\"s\", seq)\n",
        "print(list(filtered))\n",
        "# filtered=list(filter(lambda x: x.startswith('s'), seq))\n",
        "# print(str(filtered))\n"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['soup', 'salad']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JD-_SxlVF1UG"
      },
      "source": [
        "**4 -**  You are driving a little too fast, and a police officer stops you. Write a **function** to return one of 3 possible results: \"`No ticket`\", \"`Small ticket`\", or \"`Big Ticket`\". If your speed is 60 or less, the result is \"`No Ticket`\". If speed is between 61 and 80 inclusive, the result is \"`Small Ticket`\". If speed is 81 or more, the result is \"`Big Ticket`\". Unless it is your birthday (encoded as a boolean value in the parameters of the function) -- on your birthday, your speed can be 5 higher in all cases."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0cgrPLMnGNso"
      },
      "source": [
        "# Write your solution here\n",
        "def caught_speeding(speed, is_birthday):\n",
        "  if(is_birthday):\n",
        "    if speed<=60*5: # Your first condition goes here in place of 1\n",
        "        return 'No Ticket'\n",
        "    elif 60*5<speed<=80*5: # Your next condition goes here in place of 1 \n",
        "        return 'Small Ticket'\n",
        "    else:\n",
        "        return 'Big Ticket'\n",
        "  else:\n",
        "      if speed<=60:\n",
        "        return 'No Ticket'\n",
        "      elif 60<speed<=80: \n",
        "        return 'Small Ticket'\n",
        "      else:\n",
        "        return 'Big Ticket'\n"
      ],
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "wYTUt9_-Goqf",
        "outputId": "9ca6e029-8632-4664-a54d-ebc7ee56e8d8"
      },
      "source": [
        "# Would you like to check your function here to see if it is performing as we wanted?\n",
        "caught_speeding(61,True)\n",
        "caught_speeding(81,True)\n"
      ],
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'No Ticket'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**5-** Write a Python program to returns sum of all divisors of a number.\n",
        "\n",
        "If number = 8\n",
        "\n",
        "If number = 12\n",
        "\n",
        "Expected Output:\n",
        "\n",
        "7\n",
        "\n",
        "16"
      ],
      "metadata": {
        "id": "VvGX4vk8H4eF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write your solution here\n",
        "def AdvSum(num):\n",
        "  sum=0\n",
        "  for i in range(1,num):\n",
        "    if num%i==0:\n",
        "      sum=sum+i\n",
        "  return(sum)\n",
        "\n",
        "AdvSum(12)"
      ],
      "metadata": {
        "id": "u8iVC5OjIEtY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "91e5bf53-b5e8-4549-e7e2-75ee55261f20"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**6-** Sometimes, while working with Python Matrix, we can have a problem in which we need to perform grouping of all the elements with are same. This kind of problem can have application in data domains. Letâ€™s discuss certain ways in which this task can be performed.\n",
        "\n",
        "Input : test_list = [1, 3, 4, 4, 2, 3]\n",
        "\n",
        "Output : [[1], [2], [3, 3], [4, 4]]\n",
        "\n",
        "Input : test_list = [1, 3, 4, 2]\n",
        "\n",
        "Output : [[1], [2], [3], [4]]"
      ],
      "metadata": {
        "id": "FwXMUngvI7fY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from typing import Counter\n",
        "# Write your solution here\n",
        "def GroupingBy(input):\n",
        "  input.sort()\n",
        "  # print(input)\n",
        "  op=Counter(input)\n",
        "  output=[[i]* value for i,value in op.items()]\n",
        "  return output\n",
        "# test_list = [1, 3, 4, 4, 2, 3]\n",
        "test_list = [1, 3, 4, 2]\n",
        "GroupingBy(test_list)\n",
        "\n",
        "    \n"
      ],
      "metadata": {
        "id": "Rqw4EcgAJCOp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eea0f54a-3691-4c3a-bed0-775d616317dd"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[1], [2], [3], [4]]"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**7-** Given two lists a, b. Check if two lists have at least one element common in them.\n",
        "\n",
        "Input : a = [1, 2, 3, 4, 5]\n",
        "        b = [5, 6, 7, 8, 9]\n",
        "\n",
        "Output : True\n",
        "\n",
        "Input : a=[1, 2, 3, 4, 5]\n",
        "        b=[6, 7, 8, 9]\n",
        "\n",
        "Output : False"
      ],
      "metadata": {
        "id": "fpVTQuGyJF6_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write your solution here\n",
        "a = [1, 2, 3, 4, 5] \n",
        "b = [5, 6, 7, 8, 9]\n",
        "# b=[6, 7, 8, 9]\n",
        "counter=0\n",
        "for i in range(len(a)):\n",
        "  for j in range(len(b)):\n",
        "    c = a[i]==b[j]\n",
        "    counter+=c\n",
        "if counter>=1:\n",
        "  print('True')\n",
        "elif counter==0:\n",
        "  print('False')\n"
      ],
      "metadata": {
        "id": "c8MEzgRYJnLm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30acf8d2-8602-4ca1-e4df-605725a2920f"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n54onJZLFIEb"
      },
      "source": [
        "**Great work!!**\n",
        "\n",
        "**Acknowledgements:** Bin Gu, Justin Johnson, Volodymyr Kuleshov, Salman Khan, Jose Portilla, Isaac Caswell."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k6WVAPyOFb0G"
      },
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ]
    }
  ]
}
